// Generated by CoffeeScript 1.4.0
(function() {
  var App, NewPostView, Newsfeed, Post, PostCollection, PostView, Router, User,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  User = (function(_super) {

    __extends(User, _super);

    function User() {
      return User.__super__.constructor.apply(this, arguments);
    }

    User.prototype.getAvatar = function() {
      return this.get('uri') + '/avatar.jpg';
    };

    return User;

  })(Backbone.Model);

  Post = (function(_super) {

    __extends(Post, _super);

    function Post() {
      return Post.__super__.constructor.apply(this, arguments);
    }

    Post.prototype.urlRoot = '/api/post';

    Post.prototype.getUser = function() {
      return this.user || (this.user = new User(this.get('user')));
    };

    Post.prototype.escapeAndLinkifyContent = function() {
      return linkify(this.get('content').replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;'));
    };

    return Post;

  })(Backbone.Model);

  PostCollection = (function(_super) {

    __extends(PostCollection, _super);

    function PostCollection() {
      return PostCollection.__super__.constructor.apply(this, arguments);
    }

    PostCollection.prototype.model = Post;

    PostCollection.prototype.url = '/api/newsfeed';

    return PostCollection;

  })(Backbone.Collection);

  Newsfeed = (function(_super) {

    __extends(Newsfeed, _super);

    function Newsfeed() {
      this.render = __bind(this.render, this);
      return Newsfeed.__super__.constructor.apply(this, arguments);
    }

    Newsfeed.prototype.initialize = function() {
      this.template = _.template($("#newsfeed-template").html().sub(/^[\n\s]+/, ''));
      this.itemTemplate = _.template($("#newsfeed-item-template").html().sub(/^[\n\s]+/, ''));
      return this.collection.fetch({
        success: this.render
      });
    };

    Newsfeed.prototype.render = function() {
      var ul,
        _this = this;
      ul = this.$el.empty().html(this.template()).find('ul');
      return this.collection.each(function(model) {
        return $(_this.itemTemplate({
          model: model
        })).appendTo(ul);
      });
    };

    return Newsfeed;

  })(Backbone.View);

  PostView = (function(_super) {

    __extends(PostView, _super);

    function PostView() {
      this.render = __bind(this.render, this);
      return PostView.__super__.constructor.apply(this, arguments);
    }

    PostView.prototype.initialize = function() {
      this.template = _.template($("#post-view-template").html().sub(/^[\n\s]+/, ''));
      return this.model.fetch({
        success: this.render
      });
    };

    PostView.prototype.render = function() {
      this.$el.empty().html(this.template({
        model: this.model
      }));
      return this.$el.embedly({
        method: 'after',
        maxWidth: $(window).width() - 20
      });
    };

    return PostView;

  })(Backbone.View);

  NewPostView = (function(_super) {

    __extends(NewPostView, _super);

    function NewPostView() {
      this.onSubmit = __bind(this.onSubmit, this);

      this.render = __bind(this.render, this);
      return NewPostView.__super__.constructor.apply(this, arguments);
    }

    NewPostView.prototype.initialize = function() {
      this.template = _.template($("#post-new-template").html().sub(/^[\n\s]+/, ''));
      return this.render();
    };

    NewPostView.prototype.events = {
      'submit form': 'onSubmit'
    };

    NewPostView.prototype.render = function() {
      this.$el.empty().html(this.template({
        model: this.model
      }));
      return this.delegateEvents();
    };

    NewPostView.prototype.onSubmit = function(e) {
      var post;
      post = new Post({
        content: this.$('textarea').val()
      });
      post.save({}, {
        error: function() {
          return alert("Error saving your post, please try again...");
        },
        success: function() {
          return window.location.hash = "#";
        }
      });
      return e.preventDefault();
    };

    return NewPostView;

  })(Backbone.View);

  Router = (function(_super) {

    __extends(Router, _super);

    function Router() {
      return Router.__super__.constructor.apply(this, arguments);
    }

    Router.prototype.routes = {
      '': 'newsfeed',
      'posts/:id': 'post',
      'new': 'newPost'
    };

    Router.prototype.newsfeed = function() {
      var view;
      return view = new Newsfeed({
        collection: new PostCollection,
        el: $("body")
      });
    };

    Router.prototype.post = function(id) {
      var view;
      return view = new PostView({
        model: new Post({
          id: id
        }),
        el: $("body")
      });
    };

    Router.prototype.newPost = function() {
      var view;
      return view = new NewPostView({
        model: app.owner,
        el: $("body")
      });
    };

    return Router;

  })(Backbone.Router);

  App = (function() {

    function App() {
      new Router;
      this.owner = new User({
        "name": "Ben Nolan",
        "uri": "http:\/\/atom.localhost\/"
      });
    }

    App.prototype.start = function() {
      return Backbone.history.start();
    };

    return App;

  })();

  $(document).ready(function() {
    window.app = new App;
    return app.start();
  });

}).call(this);
